// Advanced Programming 2015
// Andrzej Wasowski, IT University of Copenhagen

package fpinscala.laziness
import scala.language.higherKinds

import org.scalatest.FlatSpec
import org.scalatest.prop.Checkers
import org.scalacheck._
import org.scalacheck.Prop._
import Arbitrary.arbitrary

// comment out all the lines below to test Scala Standard Library implementation
// of Streams. Interestingly the standard library streams are stricter than
// those from the book, so some laziness tests fail on them :)
//
import stream00._ // uncomment to test the book laziness solution implementation
// import stream01._ // uncomment to test the broken headOption implementation
// import stream02._ // uncomment to test another version that breaks headOption

class StreamSpecWasowski extends FlatSpec with Checkers {

  import Stream._

  behavior of "headOption"

  // a scenario test:

  it should "return None on an empty Stream (01)" in {
    assert(empty.headOption == None)
  }

  // An example generator of random finite non-empty streams
  def list2stream[A] (la :List[A]): Stream[A] = la.foldRight (empty[A]) (cons[A](_,_))

  // In ScalaTest we use the check method to switch to ScalaCheck's internal DSL
  def genNonEmptyStream[A] (implicit arbA :Arbitrary[A]) :Gen[Stream[A]] =
    for { la <- arbitrary[List[A]] suchThat (_.nonEmpty)}
    yield list2stream (la)

  // a property test:

  it should "return the head of the stream packaged in Some (02)" in check {
    // the implict makes the generator available in the context
    implicit def arbIntStream = Arbitrary[Stream[Int]] (genNonEmptyStream[Int])
    ("singleton" |:
      Prop.forAll { (n :Int) => cons (n,empty).headOption == Some (n) } ) &&
    ("random" |:	
      Prop.forAll { (s :Stream[Int]) => s.headOption != None } )
  }

	val stream1 = cons(1	, {throw new RuntimeException("Boom!")})

	it should "not evaluate the tail of the stream" in {
		// Will throw exception and fail test if exception is thrown
		stream1.headOption
	}

// For take:
// - take should not force any heads nor any tails of the Stream it manipulates
// - take(n) does not force (n+1)st head ever (even if we force all elements of take(n))
// - s.take(n).take(n) == s.take(n) for any Stream s and any n (idempotency)

	behavior of "take"
 
	val stream2 = (cons({throw new RuntimeException("Kapow!"); 1}, 
		{throw new RuntimeException("Ouch!"); cons(2, empty)}))

	it should "not evaluate neither head nor tail" in {
		// Will throw a RuntimeException if either head or tail is evaluated
		stream2.take(2)
	}

	val stream3 = cons(1, cons(2, cons(3, (cons({throw new RuntimeException(
		"Too far!"); 4}, empty)))))

	it should "not evaluate further than the n+1st head" in {
		// The fourth element contains an exception
		stream3.take(3)
	}

	it should "yield the same for take(n) and take(n).take(n)" in check {
		
		// implicit def arbIntStream = Arbitrary[Stream[Int]] (genNonEmptyStream[Int])
		
		Prop.forAll(genNonEmptyStream[Int], Gen.choose(0,10000)) { 
			(s: Stream[Int], n: Int) =>  s.take(n).toList == s.take(n).take(n).toList
		}
		
	}

// For drop:
// - s.drop(n).drop(m) == s.drop(n+m) for any n, m (additivity)
// - s.drop(n) does not force any of the dropped elements heads
// - the above should hold even if we force some stuff in the tail

	behavior of "drop"
	
	it should "drop the same amount with .drop(n).drop(m) and .drop(n+m)" in check {
		
		//implicit def arbIntStream = Arbitrary[Stream[Int]] (genNonEmptyStream[Int])

		Prop.forAll(Gen.choose(0,1000), Gen.choose(0,1000), genNonEmptyStream[Int]) { 
			(n: Int, m: Int, s: Stream[Int]) => { 
				s.drop(n).drop(m) == s.drop(n + m) 
			} 
		}
	}
	
	it should "not force any of the dropped elements' heads" in {
	
		val stream4 = cons({ throw new RuntimeException; 1 }, 
			cons({ throw new RuntimeException; 2 }, 
				cons({ throw new RuntimeException; 3 }, 
					cons({ throw new RuntimeException; 4 }, 
						empty))))
		
		stream4.drop(2)
	}
	
	it should "not force heads during drop, even when forcing tail" in {
	
		val stream5 = cons({ throw new RuntimeException; 1 },
			cons({ throw new RuntimeException; 2 },
				cons(3,
					cons(4, empty))))
		
		stream5.drop(2).toList
	}
	
// For map:
// - x.map(id) == x (where id is the identity function)
// - map terminates on infinite streams


	behavior of "map"
	
	it should "return the same map when supplied with the id function" in check {
		implicit def arbIntStream = Arbitrary[Stream[Int]] (genNonEmptyStream[Int])
		Prop.forAll {
			(s: Stream[Int]) => {
				s.map(x => x).toList == s.toList
			}
		}
	
	}
	
	it should "terminate on infinite streams" in {
	
		def andBeyond: Stream[Int] = cons( 1, andBeyond)
		val infinite = andBeyond
		
		infinite.map(x => x)
		
	}

// For append:
// - propose properties yourself

	behavior of "append"
	
	it should "append two streams" in {
		
		val appendStream1 = cons(1, cons(2, empty))
		val appendStream2 = cons(3, cons(4, empty))
		
		assert(appendStream1.append(appendStream2).toList == cons(1, 
			cons(2, 
				cons(3, 
					cons(4, empty)))).toList)
		
	}
	
	it should "return the same stream when appended with the empty stream" in check {
		implicit def arbIntStream = Arbitrary[Stream[Int]] (genNonEmptyStream[Int])
		Prop.forAll { 
			(s: Stream[Int]) => { s.append(empty).toList == s.toList }
		}
	}
	
	
	

}

























